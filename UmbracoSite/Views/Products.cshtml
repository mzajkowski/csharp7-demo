@inherits UmbracoTemplatePage<Products>
@using ContentModels = Umbraco.Web.PublishedContentModels;
@{
    Layout = "Master.cshtml";
}
@Html.Partial("~/Views/Partials/SectionHeader.cshtml")
<section class="section">
    <div class="container">
        <!-- todo: implement category selector -->
        <!--
        <nav class="nav-bar nav-bar--center nav-bar--air-bottom">
            <a class="nav-link nav-link--black nav-link--active" href="">All</a>
            <a class="nav-link nav-link--black" href="">Clothing</a>
            <a class="nav-link nav-link--black" href="">Instruments</a>
            <a class="nav-link nav-link--black" href="">Accessories</a>
            <a class="nav-link nav-link--black" href="">Other</a>
        </nav>
        -->
        <div class="product-grid">
            @if (Model.Content.FeaturedProducts != null)
            {
                @* Current version - note the Possible Invalid Cast Exception ;) *@
                @*foreach (Product product in Model.Content.FeaturedProducts)
                    {
                        <a href="@product.Url" class="product-grid__item" style="background-image: url('@product.Photos.FirstOrDefault().Url')">
                            <div class="product-grid__item__overlay">
                                <div class="product-grid__item__name">@product.ProductName</div>
                                <div class="product-grid__item__price">@Model.Content.DefaultCurrency @product.Price.ToString("F")</div>
                            </div>
                        </a>
                    }*@

                foreach (var product in Model.Content.FeaturedProducts)
                {
                    @RenderProduct(product)
                }
            }
        </div>
    </div>
</section>

@helper RenderProduct(object product)
{
    var productTuple = (name: "", backgroundImage: "", url: "", price: "");

    switch (product)
    {
        case Product p when p.ProductName.Length > 10:
            productTuple.name = $"{p.ProductName.Substring(0, Math.Min(p.ProductName.Length, 10))}...";
            productTuple.backgroundImage = p.Photos.FirstOrDefault()?.Url;
            productTuple.price = p.Price.ToString("F");

            break;

        case Product p:
            productTuple.name = p.ProductName;
            productTuple.backgroundImage = p.Photos.FirstOrDefault()?.Url;
            productTuple.price = p.Price.ToString("F");

            break;

        case SuperProduct sp:
            productTuple.name = $"Super {sp.ProductName}";
            productTuple.backgroundImage = sp.Photos.FirstOrDefault()?.Url;
            productTuple.price = sp.Price.ToString("F");

            break;
    }

    <a href="@productTuple.url" class="product-grid__item" style="background-image: url('@productTuple.backgroundImage')">
        <div class="product-grid__item__overlay">
            <div class="product-grid__item__name">@productTuple.name</div>
            <div class="product-grid__item__price">@Model.Content.DefaultCurrency @productTuple.price</div>
        </div>
    </a>
}